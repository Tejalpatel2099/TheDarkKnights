@using RamenRatings.WebSite.Models
@using RamenRatings.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<!-- Create new table style using bootstrap -->
<table class="table table-hover">
    <thead>
        <tr>
            <!-- Column titles are Brand and Variety -->
            <th scope="col">Brand</th>
            <th scope="col">Variety</th>
            <th scope="col"></th> <!-- Empty header for Read column-->
        </tr>
    </thead>
    <tbody>
        @foreach (var product in ProductService.GetProducts())
        {
            <tr>
                <!-- Show Brand and Variety for each ramen product-->
                <td>@product.Brand</td>
                <td>@product.Variety</td>
                <td>
                    <!-- replace Read button with a bootstrap style button -->
                    <button type="button" class="btn btn-primary rounded-pill me-2">
                        <a class="text-white" href="/Product/Read/@product.Number">📖Read</a>
                    </button>
                    <button type="button" class="btn btn-secondary rounded-pill">
                        <a class="text-white " href="/Product/Update/@product.Number">✏️Update</a>
                    </button>
                    <button type="button" class="btn btn-primary rounded-pill">
                        <a class="text-white " href="/Product/Delete/@product.Number">🗑️Delete</a>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code
{
    ProductModel selectedProduct;
    int selectedProductId;

    void SelectProduct(int productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Number == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Number}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Number}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }
}
