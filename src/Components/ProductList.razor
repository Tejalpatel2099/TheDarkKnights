@using RamenRatings.WebSite.Models
@using RamenRatings.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<!-- Product card layout -->
<div class="card-columns">
    @foreach (var product in filteredProducts)
    {
        <div class="card">
            <div class="card-img" style="background-image: url('@product.img?ts=@DateTime.Now.Ticks');">
            </div>
            <div class="card-body">
                <h5 class="card-title">@product.Variety</h5>
                <p>
                    <strong>Average Rating: </strong>
                    @{
                        var ratings = product.Ratings;
                        if ((ratings == null) == false && ratings.Length > 0)
                        {
                            double avg = ratings.Average();
                            @($"{avg:F1} / 5.0")
                        }
                        else
                        {
                            @("No ratings yet")
                        }
                    }
                </p>
            </div>
            <div class="card-footer">
                <small class="text-muted">
                    <a class="btn btn-primary" href="/Product/Read/@product.Number">More Info</a>
                    <a class="btn btn-primary" href="/Product/AddRating/@product.Number">Add Rating</a>
                </small>
            </div>
        </div>
    }
</div>

<!-- Modal for selected product -->
@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Variety</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.img');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Country</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code {
    /// <summary>
    /// Optional search string used to filter products by variety.
    /// </summary>
    [Parameter]
    public string SearchString { get; set; }

    /// <summary>
    /// Filtered list of products based on the search string.
    /// </summary>
    private IEnumerable<ProductModel> filteredProducts;

    /// <summary>
    /// Called when component parameters are set.
    /// Filters products based on the search string and triggers mock rating.
    /// </summary>
    protected override void OnParametersSet()
    {
        var allProducts = ProductService.GetProducts();

        if (!string.IsNullOrWhiteSpace(SearchString))
        {
            filteredProducts = allProducts.Where(p =>
                !string.IsNullOrEmpty(p.Variety) &&
                p.Variety.Contains(SearchString, StringComparison.OrdinalIgnoreCase));
        }
        else
        {
            filteredProducts = allProducts;
        }

        var firstProduct = filteredProducts.FirstOrDefault();
        if (firstProduct != null)
        {
            SelectProduct(firstProduct.Number);
            SubmitRating(5); // Simulate a rating to cover logic during initialization/testing
        }
    }

    /// <summary>
    /// The currently selected product for the modal.
    /// </summary>
    ProductModel selectedProduct;

    /// <summary>
    /// The ID of the selected product.
    /// </summary>
    int selectedProductId;

    /// <summary>
    /// Sets the selected product based on its ID and updates current rating.
    /// </summary>
    /// <param name="productId">Product number to select.</param>
    void SelectProduct(int productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Number == productId);
        GetCurrentRating();
    }

    /// <summary>
    /// Average star rating of the selected product.
    /// </summary>
    int currentRating = 0;

    /// <summary>
    /// Number of votes for the selected product.
    /// </summary>
    int voteCount = 0;

    /// <summary>
    /// Text label ("Vote" or "Votes") for display.
    /// </summary>
    string voteLabel;

    /// <summary>
    /// Calculates the current average rating and updates vote count/label.
    /// </summary>
    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Number}: {currentRating}");
    }

    /// <summary>
    /// Submits a rating for the selected product and updates the product state.
    /// </summary>
    /// <param name="rating">Rating value between 1 and 5.</param>
    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Number}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId); // Refresh after rating
    }
}
